import os
import threading
import tkinter as tk
from tkinter import ttk, messagebox
from win32com.client import Dispatch
import pythoncom

from start import scan_usb  # Your backend scan function


class USBScannerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("USB Malware Scanner")
        self.geometry("800x550")
        self.resizable(False, False)

        self.status_label = ttk.Label(self, text="Waiting for USB insertion... (Reinsert if already inserted)", font=("Arial", 18 , "bold"))
        self.status_label.pack(pady=10)

        # Treeview with multi-select enabled

        style = ttk.Style()
        style.configure("Treeview", font=("Arial", 13))
        style.configure("Treeview.Heading", font=("Arial", 15, "bold"))

        columns = ("File Name", "Status")
        self.tree = ttk.Treeview(self, columns=columns, show="headings", height=20, selectmode="extended")
        self.tree.heading("File Name", text="File Name")
        self.tree.heading("Status", text="Status")
        self.tree.column("File Name", width=650)
        self.tree.column("Status", width=100, anchor="center")
        self.tree.pack(padx=10, pady=10)

        scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.delete_button = ttk.Button(self, text="Delete Selected Files", command=self.delete_selected_files)
        self.delete_button.pack(pady=10)

        threading.Thread(target=self.usb_detection_thread, daemon=True).start()

    def usb_detection_thread(self):
        pythoncom.CoInitialize()
        try:
            wmi = Dispatch("WbemScripting.SWbemLocator").ConnectServer(".", "root\\CIMV2")
            query = "SELECT * FROM __InstanceCreationEvent WITHIN 2 WHERE TargetInstance ISA 'Win32_LogicalDisk'"
            watcher = wmi.ExecNotificationQuery(query)
            while True:
                event = watcher.NextEvent()
                drive = event.TargetInstance.DeviceID
                if event.TargetInstance.DriveType == 2:  # Removable drive
                    self.update_status(f"USB Drive Found: {drive}")
                    self.scan_and_show(drive)
                    self.update_status("Scanning for virus")
        finally:
            pythoncom.CoUninitialize()

    def update_status(self, text):
        def cb():
            self.status_label.config(text=text)
        self.after(0, cb)

    def scan_and_show(self, drive):
        def task():
            self.update_status("Checking for virus on USB, please wait...")
            self.clear_tree()

            infected_files = set(scan_usb(drive))

            all_files = []
            for root, dirs, files in os.walk(drive + '\\'):
                for file in files:
                    full_path = os.path.join(root, file)
                    all_files.append(full_path)

            for fpath in all_files:
                # Display relative to drive root, but store absolute path as iid for easy retrieval
                fname = os.path.relpath(fpath, drive + '\\')
                if fpath in infected_files:
                    status = "⚠ Malicious"
                    tag = "malicious"
                else:
                    status = "✔ Clean"
                    tag = "clean"
                # Insert with full path iid for easy access later
                self.tree.insert("", "end", iid=fpath, values=(fname, status), tags=(tag,))

            self.tree.tag_configure("malicious", foreground="red")
            self.tree.tag_configure("clean", foreground="green")

            self.update_status("Scan complete.")

        threading.Thread(target=task, daemon=True).start()

    def clear_tree(self):
        for item in self.tree.get_children():
            self.tree.delete(item)

    def delete_selected_files(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showinfo("No Selection", "Please select file(s) to delete.")
            return

        answer = messagebox.askyesno("Confirm Deletion", "Are you sure you want to delete the selected malicious file(s)?")
        if not answer:
            return

        errors = []
        deleted = 0
        for item in selected_items:
            # iid is full file path
            full_path = item
            status = self.tree.item(item, "values")[1]
            if "Malicious" not in status:
                continue  # Only delete malicious files

            try:
                if os.path.exists(full_path):
                    os.remove(full_path)
                    self.tree.delete(item)
                    deleted += 1
                else:
                    errors.append(f"File not found: {full_path}")
            except Exception as e:
                errors.append(f"Error deleting {full_path}: {str(e)}")

        if deleted > 0:
            messagebox.showinfo("Deletion Complete", f"Deleted {deleted} malicious file(s).")
        if errors:
            messagebox.showerror("Deletion Errors", "\n".join(errors))


if __name__ == "__main__":
    app = USBScannerApp()
    app.mainloop()
